version: 2.1
orbs:
  aws-s3: circleci/aws-s3@2.0.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        # default: ${CIRCLE_WORKFLOW_ID}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
#       # Docker image here
    - image: circleci/node:13.8.0
    steps:
    - checkout
    - run:
        name: Test frontend
        command: |
          cd frontend
          npm install
          npm run test

                
  test-backend:
    docker: 
    - image: circleci/node:13.8.0
      # Docker image here
    steps:
    - checkout
    - run:
        name: Test backend
        command: |
          cd backend
          npm install
          npm run test
            
  scan-frontend:
    docker:
    - image: circleci/node:13.8.0
      # Docker image here
    steps:
    - checkout
    - run:
        name: Scan frontend
        command: |
          cd frontend
          npm install
          npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
    - image: circleci/node:13.8.0
      # Docker image here
    steps:
    - checkout
    - run:
        name: Scan backend
        command: |
          cd backend
          npm install
          npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
    - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
    - checkout
      # Checkout code from git
    - run:
        name: Ensure back-end infrastructure exists
        command: |
          aws cloudformation deploy \
          --template-file .circleci/files/backend.yml \
          --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
          --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
          --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
            #exit 1
    - run:
        name: Ensure front-end infrastructure exist
        command: |
          aws cloudformation deploy \
          --template-file .circleci/files/frontend.yml \
          --tags project=your-tag \
          --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
          --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
            #exit 1
    - run:
        name: Add back-end ip to ansible inventory
        command: |
          aws ec2 describe-instances \
          --query 'Reservations[*].Instances[*].PublicIpAddress' \
          --output text >> .circleci/ansible/inventory.txt
          # exit 1
    - run:
        name: Install tar/gzip utility
        command: |
          yum -y install tar && yum -y install gzip

    - persist_to_workspace:
        root: ~/
        paths:
          - project/.circleci/ansible/inventory.txt
       # Here's where you will add some code to rollback on failure      

    - destroy-environment:
        workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
    - checkout
    - add_ssh_keys:
        fingerprints: ["df:f3:b3:80:88:59:aa:1b:ea:5b:45:27:85:62:a3:e2"]
    - attach_workspace:
      # Checkout code from git
          at: .circleci/ansible
      # Add ssh keys with fingerprint
      # attach workspace
    - run:
        name: Install dependencies
        command: |
          # Your code here
          apk add --update ansible
          pip install awscli
          #exit 1
    - run:
        name: Configure server
        command: |
          # Your code here
          cd .circleci/ansible
          cat inventory.txt
          ansible-playbook -i inventory.txt configure-server.yml
          #exit 1
      # Here's where you will add some code to rollback on failure    
    - persist_to_workspace:
        root: ~/
        paths:
          - project/backend
    - destroy-environment:
        workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  run-migrations:
    docker:
      - image: circleci/node:14.18.1
      # Docker image here that supports NodeJS
    steps:
    - checkout
      # Checkout code from git
    - run:
        name: Run migrations
        #no_output_timeout: 30m
        command: |
          # Your code here
          cd backend
          sudo apt update
          sudo apt install -y awscli
          sudo npm install
          npm run migrations > migrations_dump.txt
          cat migrations_dump.txt
          #exit 1
    - run:
        name: Send migration results to kvdb.io
        command: |
          if grep -q "has been executed successfully." ./backend/migrations_dump.txt
          then
            echo "Invoking KVDB"
            curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
          fi
          #exit 1
    - destroy-environment:
        workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
     - image: circleci/node:13.8.0
       user: root
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt update
            sudo apt install -y awscli
            sudo npm install
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            sudo apt update
            sudo apt install -y awscli
            sudo npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            #aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - aws-s3/copy:
          aws-region: AWS_DEFAULT_REGION
          arguments: '--recursive'
          from: ~/project/frontend/dist
          to: 's3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}'
      # Here's where you will add some code to rollback on failure    
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
    - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["df:f3:b3:80:88:59:aa:1b:ea:5b:45:27:85:62:a3:e2"]
      - attach_workspace:
            at: ~/
        # Checkout code from git
        # Add ssh keys with fingerprint
        # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible npm nodejs curl tar gzip
            pip install awscli             
      - run:
          name: Deploy backend
          no_output_timeout: 10m
          command: |
            cd backend
            npm install --force
            npm run build
            cd ..
            tar -C backend -czvf code.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv code.tar.gz .circleci/ansible/roles/deploy/files/code.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml
        # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image 
    - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl aws-cli nodejs npm
      - run:
          name: Backend smoke test
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl --connect-timeout 5 "${API_URL}/api/status" | grep "ok"; then return 0; else return 0; fi
      # - run:
      #     name: Backend smoke test.
      #     command: |
      #       # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            echo $URL
            if curl ${URL} | grep "Welcome"; then return 0; else return 1; fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
        #  requires: [smoke-test]
     # - cleanup:
       #   requires: [cloudfront-update]
